input {
  udp {
    port => 9056
    type => rawdata
  }
  udp {
    port => 9055
    type => rawdata1
  }
}
filter {


csv {
 separator => ','
quote_char => '|' # arbitrary, default one is included in the data and does not work
    columns => [ 'datetime','GPSAvaliable','SOSType','BatteryLowState','OutOfArea','SpeedStatus','PowerRemovedStatus','LatitudeVal','LatitudeDirection','LongitudeVal','LongitudeDirection','Speed','DirectionVal','HasEventStatus','VersionVal','Voltage1State','Voltage2State','Voltage3State','Voltage4State','Voltage5State','Voltage6State','Voltage7State','Voltage8State','DigitInput1State','DigitInput2State','DigitInput3State','DigitInput4State','DigitInput5State','DigitInput6State','ADCStatus','devicetype','PORT','fuelvalue','HDOP','DriverKey','LBSPosition','TranType','VoltageAlarmStatus','VoltageDownStatus','DistanceInKm','OdoDistanceInKm','dMotionHours','dStationaryHours','IsOfflineLog','PulseStatus','OutputsStatus','imei','ACKStatus','NACKStatus','InputsStatus','szGeofenceAreaId','harshcornering','corneringvalue','greedrivingvalue']

    }


if [LatitudeVal] and [LongitudeVal] {
    mutate {
    }
  }
 mutate {
 add_field => { "harshacceleration" => "0" }
 add_field => { "harshbreaking" => "0" }
 add_field => { "cal_gvalue" => "0.0" }
 add_field => { "accuracy" => "0" }
 
 }


mutate {
      add_field => [ "location", "%{[LatitudeVal]}",
                     "tmplat", "%{[LongitudeVal]}" ]

      }
mutate {
      add_field => [ "location", "%{[LongitudeVal]}",
                     "tmplat", "%{[LatitudeVal]}" ]
     }
      mutate {
    
     merge => [ "location", "tmplat" ]
      }
      mutate {
    
      convert => [ "location", "float" ]
     add_field => [ "[geoip][location]", "%{[LatitudeVal]},%{[LongitudeVal]}" ]
    
     #remove => [ "tmplat" ]
  }
    

    
 
    
if [type] == "rawdata"
 {
  mutate {
    update => {"devicetype" => "d2"}
	update => {"message" => ""}
	update => {"PORT" => ""}
    update => {"host" => ""}
  }
 
}


 

mutate
{


convert => ["GPSAvaliable","integer"]
convert => ["SOSType","integer"]
convert => ["BatteryLowState","integer"]
convert => ["OutOfArea","integer"]
convert => ["SpeedStatus","integer"]
convert => ["PowerRemovedStatus","integer"]
convert => ["LatitudeVal","float"]
convert => ["LatitudeDirection","string"]
convert => ["LongitudeVal","float"]
convert => ["LongitudeDirection","string"]
convert => ["Speed","float"]
convert => ["DirectionVal","string"]
convert => ["HasEventStatus","integer"]
convert => ["VersionVal","string"]
convert => ["Voltage1State","integer"]
convert => ["Voltage2State","integer"]
convert => ["Voltage3State","integer"]
convert => ["Voltage4State","integer"]
convert => ["Voltage5State","integer"]
convert => ["Voltage6State","integer"]
convert => ["Voltage7State","integer"]
convert => ["Voltage8State","integer"]
convert => ["DigitInput1State","integer"]
convert => ["DigitInput2State","integer"]
convert => ["DigitInput3State","integer"]
convert => ["DigitInput4State","integer"]
convert => ["DigitInput5State","integer"]
convert => ["DigitInput6State","integer"]
convert => ["ADCStatus","integer"]
convert => ["devicetype","string"]
convert => ["PORT","integer"]
convert => ["fuelvalue","integer"]
convert => ["HDOP","float"]
convert => ["DriverKey","string"]
convert => ["LBSPosition","integer"]
convert => ["TranType","integer"]
convert => ["VoltageAlarmStatus","integer"]
convert => ["VoltageDownStatus","integer"]
convert => ["DistanceInKm","float"]
convert => ["OdoDistanceInKm","float"]
convert => ["dMotionHours","float"]
convert => ["dStationaryHours","float"]
convert => ["IsOfflineLog","integer"]
convert => ["PulseStatus","integer"]
convert => ["OutputsStatus","integer"]
convert => ["imei","integer"]
convert => ["ACKStatus","integer"]
convert => ["NACKStatus","integer"]
convert => ["InputsStatus","integer"]
convert => ["szGeofenceAreaId","integer"]
convert => ["harshcornering","integer"]
convert => ["corneringvalue","integer"]
convert => ["greedrivingvalue","float"]

convert => ["harshacceleration","integer"]
convert => ["harshbreaking","integer"]
convert => ["cal_gvalue","float"]
convert => ["accuracy","integer"]

}



}
output {
  elasticsearch {
    hosts => ["http://es:9200"]
    index => "logstash1-%{+yyyy.MM.dd}" 
 }
  stdout { codec => rubydebug }
}

